import unittest
import pandas as pd
from src.dbt_vault_tasks import generate_dbt_vault_models, generate_dbt_project_files
from src.dbt_test_tasks import generate_dbt_tests, generate_dbt_sources_yml

class MockLLM:
    def invoke(self, messages):
        class MockResponse:
            def __init__(self):
                self.content = "-- Mock dbT model generated by LLM"
        return MockResponse()

class TestDbTVaultTasks(unittest.TestCase):
    
    def setUp(self):
        self.source_metadata = pd.DataFrame({
            'Table Name': ['customers', 'orders'],
            'Column Name': ['customer_id', 'order_id'],
            'Data Type': ['INTEGER', 'INTEGER'],
            'Description': ['Customer identifier', 'Order identifier']
        })
        
        self.target_metadata = pd.DataFrame({
            'Table Name': ['customers', 'orders'],
            'Column Name': ['customer_name', 'order_amount'],
            'Data Type': ['VARCHAR(100)', 'DECIMAL(10,2)'],
            'Validations': ['not null', 'range(0, 10000)']
        })
        
        # Add source metadata with descriptive attributes for satellites
        self.source_metadata_extended = pd.DataFrame({
            'Table Name': ['customers', 'customers', 'orders', 'orders'],
            'Column Name': ['customer_id', 'customer_name', 'order_id', 'order_date'],
            'Data Type': ['INTEGER', 'VARCHAR(100)', 'INTEGER', 'DATE'],
            'Description': ['Customer identifier', 'Customer name', 'Order identifier', 'Order date']
        })
        
        self.mapping_metadata = pd.DataFrame({
            'Join Conditions': ['customers.customer_id = orders.customer_id'],
            'Business Rule / Expression': ['Direct mapping']
        })
    
    def test_generate_dbt_vault_models_success(self):
        """Test successful generation of dbT Vault models"""
        result = generate_dbt_vault_models(
            self.source_metadata_extended, 
            self.target_metadata, 
            self.mapping_metadata, 
            None, 
            use_agentic=False
        )
        
        self.assertIsInstance(result, dict)
        self.assertGreater(len(result), 0)
        
        # Check that we have different types of models
        model_names = list(result.keys())
        has_staging = any(name.startswith('stg_') for name in model_names)
        has_hub = any(name.startswith('hub_') for name in model_names)
        has_satellite = any(name.startswith('sat_') for name in model_names)
        
        self.assertTrue(has_staging, "Should generate staging models")
        self.assertTrue(has_hub, "Should generate hub models")
        self.assertTrue(has_satellite, "Should generate satellite models")
    
    def test_generate_dbt_vault_models_with_llm(self):
        """Test dbT Vault model generation with LLM"""
        mock_llm = MockLLM()
        result = generate_dbt_vault_models(
            self.source_metadata, 
            self.target_metadata, 
            self.mapping_metadata, 
            mock_llm, 
            use_agentic=True
        )
        
        self.assertIsInstance(result, dict)
        self.assertGreater(len(result), 0)
    
    def test_generate_dbt_vault_models_empty_metadata(self):
        """Test dbT Vault model generation with empty metadata"""
        empty_df = pd.DataFrame()
        result = generate_dbt_vault_models(
            empty_df, 
            empty_df, 
            None, 
            None, 
            use_agentic=False
        )
        
        self.assertIsInstance(result, dict)
        self.assertIn("error", result)
    
    def test_generate_dbt_project_files(self):
        """Test generation of dbT project files"""
        result = generate_dbt_project_files("test_project")
        
        self.assertIsInstance(result, dict)
        self.assertIn("dbt_project.yml", result)
        self.assertIn("profiles.yml", result)
        self.assertIn("packages.yml", result)
        
        # Check that project name is included
        self.assertIn("test_project", result["dbt_project.yml"])
    
    def test_generate_dbt_tests_success(self):
        """Test successful generation of dbT tests"""
        result = generate_dbt_tests(
            self.target_metadata, 
            None, 
            use_agentic=False
        )
        
        self.assertIsInstance(result, dict)
        self.assertGreater(len(result), 0)
        
        # Check for schema files
        schema_files = [k for k in result.keys() if k.startswith('schema_')]
        self.assertGreater(len(schema_files), 0, "Should generate schema files")
        
        # Check for macro files
        macro_files = [k for k in result.keys() if k.endswith('.sql')]
        self.assertGreater(len(macro_files), 0, "Should generate macro files")
    
    def test_generate_dbt_tests_empty_metadata(self):
        """Test dbT test generation with empty metadata"""
        empty_df = pd.DataFrame()
        result = generate_dbt_tests(
            empty_df, 
            None, 
            use_agentic=False
        )
        
        self.assertIsInstance(result, dict)
        self.assertIn("error", result)
    
    def test_generate_dbt_sources_yml(self):
        """Test generation of dbT sources.yml"""
        result = generate_dbt_sources_yml(self.source_metadata)
        
        self.assertIsInstance(result, str)
        self.assertIn("version: 2", result)
        self.assertIn("sources:", result)
        self.assertIn("customers", result)
        self.assertIn("orders", result)
    
    def test_generate_dbt_sources_yml_empty(self):
        """Test generation of dbT sources.yml with empty metadata"""
        empty_df = pd.DataFrame()
        result = generate_dbt_sources_yml(empty_df)
        
        self.assertEqual(result, "")

if __name__ == '__main__':
    unittest.main()
